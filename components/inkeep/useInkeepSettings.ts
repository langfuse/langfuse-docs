import type {
  InkeepAIChatSettings,
  InkeepSearchSettings,
  InkeepBaseSettings,
  InkeepModalSettings,
  AIChatDisclaimerSettings,
  InkeepCallbackEvent,
} from "@inkeep/cxkit-react";
import { useTheme } from "nextra-theme-docs";
import { type PostHog, usePostHog } from "posthog-js/react";
import { useRouter } from "next/router";
import { useMemo } from "react";

const customAnalyticsCallback = (
  event: InkeepCallbackEvent,
  posthog: PostHog
): void => {
  const { componentType, conversation } = event.properties;
  const messages = conversation?.messages || [];
  posthog.capture(`inkeep:${event.eventName}`, {
    interactionType: componentType,
    content:
      event.eventName === "user_message_submitted"
        ? messages[messages.length - 1]?.content
        : undefined,
  });
};

const inkeepCustomTabsToSlugs: { tab: string; slug: string | string[] }[] = [
  { tab: "Docs", slug: "/docs" },
  { tab: "Integrations", slug: "/integrations" },
  { tab: "Self Hosting", slug: "/self-hosting" },
  { tab: "FAQ & Guides", slug: ["/faq", "/guides"] },
  { tab: "Security", slug: "/security" },
  { tab: "Handbook", slug: "/handbook" },
  { tab: "Blog", slug: "/blog" },
];

type InkeepSharedSettings = {
  baseSettings: InkeepBaseSettings;
  aiChatSettings: InkeepAIChatSettings;
  searchSettings: InkeepSearchSettings;
  modalSettings: InkeepModalSettings;
};

const useInkeepSettings = (): InkeepSharedSettings => {
  const { resolvedTheme } = useTheme();
  const posthog = usePostHog();
  const router = useRouter();

  const tabOfCurrentDocsSection = useMemo(() => {
    return inkeepCustomTabsToSlugs.find((t) => {
      const slugs = Array.isArray(t.slug) ? t.slug : [t.slug];
      return slugs.some((slug) => router.pathname.startsWith(slug));
    })?.tab;
  }, [router.pathname]);

  const baseSettings: InkeepBaseSettings = {
    apiKey: process.env.NEXT_PUBLIC_INKEEP_API_KEY! || "",
    primaryBrandColor: "#E11312", // your brand color, widget color scheme is derived from this
    organizationDisplayName: "Langfuse",
    // ...optional settings
    colorMode: {
      forcedColorMode: resolvedTheme, // to sync dark mode with the widget
    },
    onEvent: (event) => customAnalyticsCallback(event, posthog),
    transformSource: (source, type, opts) => {
      // Transform based on source type
      const tab = inkeepCustomTabsToSlugs.find((t) => {
        const slugs = Array.isArray(t.slug) ? t.slug : [t.slug];
        return slugs.some((slug) =>
          source.url.startsWith("https://langfuse.com" + slug)
        );
      })?.tab;
      if (type === "searchResultItem") {
        return {
          ...source,
          ...(tab ? { tabs: [tab] } : {}),
        };
      }
      return source;
    },
  };

  const modalSettings: InkeepModalSettings = {
    // optional settings

    // deactivate by default, only activated for search bar
    shortcutKey: null,
  };

  const searchSettings: InkeepSearchSettings = {
    placeholder: "Search...",
    tabs: inkeepCustomTabsToSlugs
      .map((t) => t.tab)
      .concat(["All", "GitHub"])
      // add isAlwaysVisible to current website section
      .map((t) =>
        t === tabOfCurrentDocsSection ? [t, { isAlwaysVisible: true }] : t
      ),
  };

  const disclaimerSettings: AIChatDisclaimerSettings = {
    isEnabled: true,
    label: "AI-generated response",
    tooltip:
      "This response is generated by AI and may contain inaccuracies or errors. Please reach out to support if you need assistance.",
  };

  // const contactSupportCallToAction: InvokeCallbackAction = {
  //   type: "invoke_callback",
  //   callback: () => {
  //     showChat();
  //     // if (!args.conversation?.messages?.length) {
  //     //   showChat();
  //     //   return;
  //     // }

  //     // const draftMessage =
  //     //   "I tried to get answers via the AI chat but was unable to. My questions were:\n\n" +
  //     //   args.conversation.messages
  //     //     .filter((message) => message.role === "user")
  //     //     .map((message) => message.content)
  //     //     .join("\n");

  //     // openChat(draftMessage);
  //   },
  //   shouldCloseModal: false,
  // };

  const aiChatSettings: InkeepAIChatSettings = {
    // optional settings
    chatSubjectName: "Langfuse",
    aiAssistantAvatar: "/icon256.png", // use your own bot avatar
    introMessage:
      "Hi! I'm Langfuse's AI assistant trained on documentation, help articles, and other content. How can I help you today?",
    isCopyChatButtonVisible: true,
    disclaimerSettings,
    isShareButtonVisible: true,
    shareChatUrlBasePath: "https://langfuse.com/docs/ask-ai",
    getHelpOptions: [
      {
        name: "Contact Support",
        action: {
          type: "open_link",
          url: "/support",
        },
        icon: {
          builtIn: "IoChatbubblesOutline",
        },
      },
    ],
    exampleQuestions: [
      "How can Langfuse help me?",
      "How to use the Python decorator for tracing?",
      "How to set up LLM-as-a-judge evals?",
    ],
  };

  return { baseSettings, aiChatSettings, searchSettings, modalSettings };
};

export default useInkeepSettings;
